/* 
* Autogenerated service code 
* Variables (text between %) must have been replaced when code is autogenerated
*/

package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.SalesOrderRepository;
import domain.Actor;
import domain.Allergen;
import domain.Ingredient;
import domain.Menu;
import domain.Quantity;
import domain.Recipe;
import domain.SalesOrder;
import domain.Substitutes;
import domain.User;
import domain.Clerk;

@Service
@Transactional
public class SalesOrderService {

	// Managed repository -----------------------------------------------------
	@Autowired
	private SalesOrderRepository orderRepository;

	// Ancillary services -----------------------------------------------------

	@Autowired
	private MenuService menuService;
	
	@Autowired
	private SubstitutesService substitutesService;
	
	@Autowired
	private IngredientService ingredientService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private ActorService actorService;
	
	
	
	// Constructor ------------------------------------------------------------
	public SalesOrderService(){
		super();
	}

	// Simple CRUD methods ----------------------------------------------------
	public SalesOrder create(){
		SalesOrder newbye;
		User u = userService.findByPrincipal();
		newbye = new SalesOrder();
		Date shippingDate;
		shippingDate = new Date(System.currentTimeMillis()-1);
		
		newbye.setShippingDate(shippingDate);
		newbye.setAddress(u.getAddress());
		newbye.setSent(false);
		return newbye;
	}

	public SalesOrder save(SalesOrder entity){
		Assert.notNull(entity);
		
		//userService.findByPrincipal();
		
		Actor a = actorService.findByPrincipal();
		if(a instanceof User){
			Assert.isTrue(!entity.getSent());
		}
		
		if(a instanceof Clerk){
			Assert.isTrue(findOne(entity.getId()).getClerk() == null);
		}
		return orderRepository.save(entity);
		
	}


	public void delete(SalesOrder entity){
		Assert.isTrue(entity.getId()!=0);
		Assert.isTrue(this.orderRepository.exists(entity.getId()));
		
		this.orderRepository.delete( entity );
		
		Assert.isTrue(!this.orderRepository.exists(entity.getId()));
	}

	public SalesOrder findOne(int id){
		Assert.isTrue(id != 0);
		
		SalesOrder res;
		
		res = this.orderRepository.findOne(id);
		
		return res;
	}

	public Collection<SalesOrder> findAll(){
		Collection<SalesOrder> res;
		
		res = orderRepository.findAll();
		
		return res;
	}

	// Other business methods -------------------------------------------------

	public Collection<SalesOrder> findOrdersWithoutClerk(){
		Collection<SalesOrder> orders;
		
		orders = orderRepository.findOrdersWithoutClerk();
		
		return orders;
	}
	
	public Collection<SalesOrder> findOrdersByClerk(int clerkId){
		Collection<SalesOrder> orders;
		
		orders = orderRepository.findOrdersByClerk(clerkId);
		
		return orders;
	}
	
	public Collection<SalesOrder> findOrdersByUser(int userId){
		Collection<SalesOrder> orders;
		
		orders = orderRepository.findOrdersByUser(userId);
		
		return orders;
	}
	
	public Integer getNumberOfSentOrders(){
		Integer number = orderRepository.getNumberOfSentOrders();
		
		return number;
	}
	
	// Ancillary methods ------------------------------------------------------
	
	public Collection<Substitutes> getSubstitutesByUserMenu(User u, Menu menu){
		Collection<Substitutes> substitutes = new ArrayList<>();
		List<Object[]> ingredient_recipe_allergen = ingredientService.getAllergenIngredientsByUserPerMenu(menu.getId(), u.getId());
		
		for(Object[] o: ingredient_recipe_allergen){
			Ingredient i = (Ingredient)o[0];			
			Recipe r = (Recipe) o[1];
			Allergen a = (Allergen) o[2];
			List<Ingredient> ing = new ArrayList<>(a.getSubstitutes());
			Ingredient ing_substitute = ing.get(0);
			for(Ingredient in : ing){
				if(!in.getAllergens().contains(a)){
					ing_substitute = in;
					break;
				}
			}
			 
			Quantity q = (Quantity)o[3];
			substitutes.add(substitutesService.create(ing_substitute.getName(), ing_substitute.getMetricUnit(), q.getValue(), r.getName()));
			
		}
		
		return substitutes;
	
	}

}
