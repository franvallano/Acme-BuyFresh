/* 
* Autogenerated service code 
* Variables (text between %) must have been replaced when code is autogenerated
*/

package services;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.AdministratorRepository;
import security.LoginService;
import security.UserAccount;
import domain.Administrator;

@Service
@Transactional
public class AdministratorService {

	// Managed repository -----------------------------------------------------
	@Autowired
	private AdministratorRepository administratorRepository;

	// Ancillary services -----------------------------------------------------

	// Constructor ------------------------------------------------------------
	public AdministratorService(){
		super();
	}

	// Simple CRUD methods ----------------------------------------------------
	public Administrator create(){
		Administrator newbye;
		
		newbye = new Administrator();
		
		return newbye;
	}

	public void save(Administrator entity){
		Assert.notNull(entity);
		
		this.administratorRepository.save(entity);
	}

	public void delete(Administrator entity){
		Assert.isTrue(entity.getId()!=0);
		Assert.isTrue(this.administratorRepository.exists(entity.getId()));
		
		this.administratorRepository.delete( entity );
		
		Assert.isTrue(!this.administratorRepository.exists(entity.getId()));
	}

	public Administrator findOne(int id){
		Assert.isTrue(id != 0);
		
		Administrator res;
		
		res = this.administratorRepository.findOne(id);
		
		return res;
	}

	public Collection<Administrator> findAll(){
		Collection<Administrator> res;
		
		res = administratorRepository.findAll();
		
		return res;
	}

	// Other business methods -------------------------------------------------

	public Administrator findByPrincipal() {
	 	Administrator administrator;
	 	UserAccount userAccount;
	 	
	 	userAccount = LoginService.getPrincipal();
	 	administrator = administratorRepository.findByPrincipal(userAccount.getId());
	 	
	 	Assert.notNull(administrator);
	 	
	 	return administrator;
	}
	
	// Ancillary methods ------------------------------------------------------

}
