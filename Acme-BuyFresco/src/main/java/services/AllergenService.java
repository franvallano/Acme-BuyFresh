/* 
* Autogenerated service code 
* Variables (text between %) must have been replaced when code is autogenerated
*/

package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.AllergenRepository;
import domain.Allergen;
import domain.Ingredient;
import domain.Recipe;
import domain.User;

@Service
@Transactional
public class AllergenService {

	// Managed repository -----------------------------------------------------
	@Autowired
	private AllergenRepository allergenRepository;

	// Ancillary services -----------------------------------------------------

	@Autowired
	private AdministratorService administratorService;
	
	@Autowired
	private RecipeService recipeService;
	
	@Autowired
	private IngredientService ingredientService;
	
	// Constructor ------------------------------------------------------------
	public AllergenService(){
		super();
	}

	// Simple CRUD methods ----------------------------------------------------
	public Allergen create(){
		Allergen newbye;
		
		administratorService.findByPrincipal();
		
		Collection<User>users = new ArrayList<User>();
		Collection<Ingredient>substitutes = new HashSet<Ingredient>();
		Collection<Ingredient>ingredients = new HashSet<Ingredient>();
		Collection<Recipe>recipes = new HashSet<Recipe>();
		
		newbye = new Allergen();
		
		newbye.setAllergenIngredients(ingredients);
		newbye.setRecipes(recipes);
		newbye.setSubstitutes(substitutes);
		newbye.setUsers(users);
		
		return newbye;
	}

	public void save(Allergen entity){
		Assert.notNull(entity);
		
		Collection<Ingredient>ingredients = entity.getAllergenIngredients();
		Collection<Recipe>ing = new ArrayList<Recipe>() ;
		
		if(!ingredients.isEmpty()){
			for(Ingredient i : ingredients){
				ing = recipeService.getRecipesByIngredients(i.getName());
				
				entity.setRecipes(ing);
			}
		}
		
		this.allergenRepository.save(entity);
	}
	

	public void delete(Allergen entity){
		Assert.isTrue(entity.getId()!=0);
		Assert.isTrue(this.allergenRepository.exists(entity.getId()));
		
		this.allergenRepository.delete(entity);
		
		Assert.isTrue(!this.allergenRepository.exists(entity.getId()));
	}
	

	public Allergen findOne(int id){
		Assert.isTrue(id != 0);
		
		Allergen res;
		
		res = this.allergenRepository.findOne(id);
		
		return res;
	}

	public Collection<Allergen> findAll(){
		Collection<Allergen> res;
		
		res = allergenRepository.findAll();
		
		return res;
	}

	
	public Collection<Allergen> allergenMoreUsers(){
		Collection<Allergen> res;
		
		res = allergenRepository.allergenMoreUsers();
		
		return res;
	}
	// Other business methods -------------------------------------------------

	public Collection<Allergen> findAllergensByIngredientId(int ingredientId){
		Collection<Allergen> result;
		
		result = allergenRepository.findAllergensByIngredientId(ingredientId);
		
		return result;
	}
	
	public Collection<Allergen> findAllergenByRecipeId(int recipeId){
		Collection<Allergen> result;
		
		result = allergenRepository.findAllergensByRecipeId(recipeId);
		
		return result;
	}
	
	public Allergen findAllergenByName(String allergenName){
		
		Allergen res;
		
		res = this.allergenRepository.findAllergenByName(allergenName);
		
		return res;
		
	}
	
	
	// Ancillary methods ------------------------------------------------------

}
